
======== IN THIS FILE IS INFORMATION REGARDING PACKET STRUCTURE ========

// 

1. General information
// * Everywhere (almost) should be used unsigned data types (int, char, floats).
// * Should use little endian encoding.
// * There is used escaping when sending data over network. Int '\0' is
//   replaced with ints 1 2 and int 1 is replaced with 1 3.

2. Whole packet structure
// ============== [ PACKET ] =================
// packet[0, 1] = 0                        // packet divisor
// packet[2] = packet_type                 // possible values 0...7
// packet[3,4,5,6] = data_length           // unsigned int
// packet[7,8,9,10] = NPK                  // sequence of packet
// packet[11 ... data_length + 11] = data  // packet data (see section 3)
// packet[data_length+11+1] = XOR chk      // See Note.
// packet
// ===========================================
// Note. XOR is done in while loop on non-escaped packet chk ^= packet[i].
//       But not whole packet - only packet[2] ... packet[data_length + 11]

3. Packet types and their data
// 0) This is sent from client to server when connecting.
//    =============== [ 0th PACKET DATA CONTENT ] ===============
//    packet[0] = number of chars in username
//    packet[1...strlen(username)+1] = username
//    packet[strlen(username)+1...strlen(username)+1+6] = color
//    ===========================================================
//    Note for color bytes: there are 6 chars in color - 6 hex digits.
//    Note. Total packet size is strlen(name) + 1 + 6 + 1 = strlen(name) + 8
//
// 1) This is approval from server that packet is received and is ok.
//    ================ [1st PACKET DATA CONTENT] ==================
//    packet[0] = game ID
//    packet[1] = player ID
//    packet[2,3,4,5] = player's initial size (unsigned int)
//    packet[6,7,8,9] = maximum play field x (unsigned int)
//    packet[10,11,12,13] = maximum play field y (unsigned int)
//    packet[14,15,16,17] = time limit (unsigned int) in seconds
//    packet[18,19,20,21] = number of lives (unsigned int)
//    =========================================================
//    Total packet size 22 (+ escapes)
//
// 2) Client ready (client -> server)
//    ================ [2nd PACKET DATA CONTENT] ==================
//    packet[0] = game ID
//    packet[1] = player ID
//    packet[2][0,1,2,3,4] = empty (zeros) -- bitlevel
//    packet[2][5] = bit - whether client is redy (1 - yes)
//    packet[2][6] = bit - wants to change nickname (1 - yes) - optional
//    packet[2][7] = bit - wants to change color (1 - yes) - optional
//    packet[3] = len of new name if changed - optional - skip
//    packet[4 ... 4+strlen(name)] = new nickname - optional - skip
//    packet[4+strlen(name)+1 ... 4+strlen(name)+1+6] = new color - optional - skip
//    =========================================================
//    Note. I do not implement optionals.
//          Therefore, I do send only 0., 1., 2. bytes. All other skipped.
//
// 3) Gamestate (server -> all clients)
//    ================ [3nd PACKET DATA CONTENT] ==================
//    packet[0] = game ID
//    packet[1] = Num of players
//    P_LEN = len_of_players_data*Num Of players;
//    packet[2 ... 2 + P_LEN] = PLAYER DATA*
//    packet[3 + P_LEN ... 4 + P_LEN] = Num of dots (unsigned short int), max 65536
//    packet[5 + P_LEN ... 5 + P_LEN + 8*Num of dots] = DOT INFORMATION**
//    packet[5 + P_LEN + 8*Num of dots + 1 ... 5 + P_LEN + 8*Num of dots + 4] = Time left (unsigned int)
//    =========================================================
//    ==== PLAYER DATA ====
//    data[0] = player ID
//    data[1] = strlen(name)
//    data[2 ... strlen(name)] = name
//    data[2 + strlen(name) ... 5 + strlen(name)] = player's location x (unsigned int)
//    data[6 + strlen(name) ... 9 + strlen(name)] = player's location y (unsigned int)
//    data[10 + strlen(name) ... 15 + strlen(name)] = color (6 hex digits)
//    data[16 + strlen(name) ... 19 + strlen(name)] = player's size (unsigned int)
//    data[20 + strlen(name) ... 23 + strlen(name)] = player's score (unsigned int)
//    data[24 + strlen(name) ... 27 + strlen(name)] = player' s lives (unsigned int)
//    ==== DOT INFORMATION ====
//    data[0,1,2,3] = x_location - unsigned int
//    data[4,5,6,7] = y_location - unsigned int
//
// 4) Update about keypresses client -> server
//    ================ [4th PACKET DATA CONTENT] ==================
//    packet[0] = game ID (unsigned char)
//    packet[1] = player ID (unsigned char)
//    packet[2][0,1,2,3] = empty (zeros) -- bitlevel
//    packet[2][4] = bit - w is pressed (1 - yes)
//    packet[2][5] = bit - a is pressed (1 - yes)
//    packet[2][6] = bit - s is pressed (1 - yes)
//    packet[2][7] = bit - d is pressed (1 - yes)
//    =========================================================
//
// 5) Game Lost (died) (server -> client)
//    ================ [5th PACKET DATA CONTENT] ==================
//    packet[0] = game ID
//    packet[1] = player ID
//    packet[2,3,4,5] = score (unsigned int)
//    packet[6,7,8,9] = time_passed (unsigned int)
//    =========================================================
//
// 6) Game has ended (server -> all clients but each client different packet)
//    ================ [6th PACKET DATA CONTENT] ==================
//    packet[0] = game ID
//    packet[1] = Receiver's ID
//    packet[2,3,4,5] = Receiver's score (unsigned int)
//    packet[6,7] = Number of players (including receiver) (unsigned short int)
//    packet[8 ... ] = LEADERBOARD DATA (below) ... goes into for loop for each player
//    for (i=0; i < num of players; i++)
//       data[0 + prev] = strlen(name) (unsigned char = 1 byte)
//       data[1 + prev ... 1 + prev + strlen(name)] = username
//       data[1 + prev + strlen(name) ... 5 + prev + strlen(name)] = score (unsigned int = 4 bytes)
//    =========================================================
//
// 7) Just some messge. Can be sent to server from client or from server to client.
//    ================ [7th PACKET DATA CONTENT] ==================
//    packet[0] = game ID
//    packet[1] = Player ID
//    packet[2,3] = strlen(message) (unsigned short int)
//    packet[4 ... 4 + strlen(message)] = message
//    =========================================================
